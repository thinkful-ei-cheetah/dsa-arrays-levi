Assignement:

1)============================================================================

2)============================================================================
Array.SIZE_RATIO = 3;
arr.push(3);
--------------------------------------------------------
What is the length, capacity and memory address of your array?
--------------------------------------------------------
length = 1
capacity = 3
memory address (ptr) = 0

--------------------------------------------------------
Add the following in the main function and then print the array:
--------------------------------------------------------
arr.push(5);
arr.push(15);
arr.push(19);
arr.push(45);
arr.push(10);

--------------------------------------------------------
What is the length, capacity and memory address of your array? 
Explain the result of your program after adding the new lines of code.
--------------------------------------------------------

length = 6
-------------------
  -length = number of items we pushed into our array

capacity = 12
-------------------
  -started at 0
  -then we added 1 item
    -we increased it by length(0) + 1 * SIZE_RATION(3) => 3
  -when we pushed the 4th item, we ran out of space
    -we increased it by length(3) + 1 * SIZE_RATION(3) => 12

memory address (ptr) = 3
-------------------
  -start at 0
  -when we pushed the 4th item, we ran out of space
    -we realocated memory to next available free memory address/block?
      -the next available was at memory address 3
        -our array now occupies memory address ptr(3) - ptr + capacity - 1(14)

3)============================================================================
--------------------------------------------------------
What is the length, capacity, and address of your array? Explain the result 
of your program after adding the new lines of code.
--------------------------------------------------------

length = 3
-------------------
  -we changed the length of the array only, meaning we are not tracking 
   any data between the length and capacity

capacity = 12
-------------------
  -length decreased, so there is no way length can exceed the capacity, so we
   don't need to increase capacity

memory address (ptr) = 3
-------------------
  -we did not need to realocate memory, so we can stay at the same memory address

4)============================================================================
--------------------------------------------------------
Print the 1st item in the array arr.

Empty the array and add just 1 item: arr.push("tauhida");

Print this 1 item that you just added. What is the result? Can you explain your result?
--------------------------------------------------------
  -It prints out NaN
  -We tried to add a string to an array that only accepts floating point 
   numbers, which truncated our input.

--------------------------------------------------------
What is the purpose of the _resize() function in your Array class?
--------------------------------------------------------
  -It resizes the array so their is space for new items.

5)============================================================================

function URLify(str) {
  let output = []
  for (let i = 0; i < str.length; i++) {
    if (str[i] === ' ') {
      output.push('%20')
    }
    else {
      output.push(str[i])
    }
  }
  return output.join('')
}

6)============================================================================

function filter(arr) {
  let output = []
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] >= 5) {
      output.push(arr[i])
    }
  }
  return output
}

7)============================================================================

let maxSum = function(arr) {
    let currentMax = 0;
    let Max = 0;
    for (let i=0; i<arr.length; i++) {
        let item = arr[i];
        currentMax = Math.max(0, currentMax + item);
        Max = Math.max(Max, currentMax);
        //console.log(item, Max, currentMax);
    }
    return Max;
};

maxSum([-5, 4, 6, -3, 5, -2, 1])

8)============================================================================

function merge(arr1, arr2) {
    let i1 = 0, i2 = 0;
    let output = [];
    while (i1 < arr1.length && i2 < arr2.length) {
        if (arr1[i1] <= arr2[i2])
            output.push(arr1[i1++]);
        else
            output.push(arr2[i2++]);
    }
    if (i2 < arr2.length) {
        i1 = i2;
        arr1 = arr2;
    }
    while (i1 < arr1.length) 
        output.push(arr1[i1++]);
    return output;
}

merge([1, 3, 6, 8, 11, 100], [2, 3, 5, 8, 9, 10, 15, 25, 37, 42])

9)============================================================================

function remove(str) {
  let char = ['a', 'e', 'i', 'o', 'u']
  let output = ''
  for (let i = 0; i < str.length; i++){
    let insert = true
    for(let j = 0; j < char.length; j++){
      if (str[i] === char[j]) {
        insert = false
      }
    }
    if(insert) {
      output += str[i]
    }
  }
  return output
}

remove('abcdefghijklmnopqrstuvwxyz')

10)===========================================================================

function products(arr) {
  let output = [];
  for (let i1 = 0; i1 < arr.length; ++i1) {
    let product = 1;
    for(let i2 = 0; i2 < arr.length; ++i2){
      if(i1 != i2){
        product *= arr[i2];
      }
    }
    output.push(product)
  }
  return output;
}

products([1, 3, 9, 4])

11)===========================================================================

function zero(arrs){
    const Rows = [];
    const Cols = [];

    for (let i=0; i<arrs.length; i++) {
        let row = arrs[i];
        for (let j=0; j<row.length; j++) {
            const item = row[j];
            if (item === 0) {
                Rows[i] = true;
                Cols[j] = true;
            }
        }
    }

    for (let i=0; i<arrs.length; i++) {
        let row = arrs[i];
        for (let j=0; j<row.length; j++) {
            if (Rows[i] || Cols[j]) {
                row[j] = 0;               
            }
        }
    }
    return arrs;
}

zero([[1,0,1,1,0],
[0,1,1,1,0],
[1,1,1,1,1],
[1,0,1,1,1],
[1,1,1,1,1]])

12)===========================================================================

function rotation(str1, str2){
  const newStr = str2 + str2;
  return newStr.includes(str1);
}

rotation('amazon', 'azonam')